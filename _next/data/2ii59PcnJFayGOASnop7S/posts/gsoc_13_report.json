{"pageProps":{"blog":{"content":"<h1 id=\"lfortran-implementing-a-custom-wasm-backend\">LFortran: IMPLEMENTING A CUSTOM WASM BACKEND</h1>\n<h2 id=\"gsoc22-report\">GSoC'22 Report</h2>\n<hr>\n<ul>\n<li><strong>Organization:</strong> Fortran-Lang</li>\n<li><strong>Mentors:</strong> Ondrej Certik, Gagandeep Singh, Rohit Goswami</li>\n<li><strong>Contributor:</strong> Ubaid Shaikh</li>\n</ul>\n<hr>\n<p>This report summarizes the work done as part of my <code>GSoC 2022</code> project titled <code>LFortran: IMPLEMENTING A CUSTOM WASM BACKEND</code> at <code>LFortran</code>/<code>Fortran-Lang</code>.</p>\n<h2 id=\"project-outline\">Project Outline:</h2>\n<p>The objective in this project is to implement a <code>WebAssembly</code> (<code>WASM</code>) Backend for the <code>LFortran</code> Compiler.\nThe goal is also to compile <code>LFortran</code> to <code>WASM</code> and deploy on a static webpage. Thus, this project aims\nto add to <code>fortran</code> the capability of executing on the <code>World Wide Web</code>, the only truly universal platform.</p>\n<h2 id=\"what-was-done\">What was done:</h2>\n<p>Our project was mostly completed in four phases as follows:</p>\n<ul>\n<li><p><strong>Pre-GSoC Phase:</strong> During this phase we iterated over the design of the <code>wasm</code> backend and implemented it.\nThe weekly blogs during this phase are as follows:</p>\n<ul>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_0~1_contributing_to_integration_tests\">Pre-GSoC Blog 1: Contributing to Integration Tests</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_0~2_asr_to_wasm_backend\">Pre-GSoC Blog 2: The Designing of the ASR-&gt;WASM Backend</a></p>\n</li>\n</ul>\n</li>\n<li><p><strong>GSoC Phase-1:</strong> During this phase we designed the <code>wat</code> backend and added initial support for compiling <code>lfortran</code> to <code>wasm</code>. We also deployed the built <code>lfortran</code> <code>wasm</code> binary to a live site. The weekly blogs during this phase are as follows:</p>\n<ul>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_1_wasm_to_wat_backend\">GSoC Blog 1: The Designing of the WASM-&gt;WAT Backend</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_2_llvm_wasm_backend_and_build_to_wasm\">GSoC Blog 2: Enabling LLVM Based WASM Backend and Build LFortran to WASM</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_3_extending_wasm_and_wat_backends\">GSoC Blog 3: Extending WASM and WAT Backends</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_4_print_and_lcompilers_frontend\">GSoC Blog 4: Adding Print support and Deploying on Live Site</a></p>\n</li>\n</ul>\n</li>\n<li><p><strong>GSoC Phase-2:</strong> Now that we had the <code>wasm</code> backend, the <code>wat</code> backend and compilation of <code>lfortran</code> to <code>wasm</code>.\nThe next part of the project was to extend the <code>wasm</code> and <code>wat</code> backends to support more features of <code>fortran</code>/<code>ASR</code>. This extension of both the backends was accomplished in this phase. The weekly blogs during this phase are as follows:</p>\n<ul>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_5_nodejs_testing_and_basic_if_else\">GSoC Blog 5: NodeJS Testing Infrastructure and Supporting Basic If-Else</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_6_type_conversion_and_extend_operators_support\">GSoC Blog 6: Type Conversions and Supporting More Operators</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_7_loops_and_various_improvements\">GSoC Blog 7: Supporting Loops and Other Improvements</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_8_subroutines_and_refactoring\">GSoC Blog 8: Supporting Subroutines and Improving/Refactoring WASM Backend</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_9_supporting_arrays\">GSoC Blog 9: Initial Support for Arrays</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_10_multi_dim_arrays_and_wasm_testing_at_ci\">GSoC Blog 10: Supporting Multi-Dimensional Arrays and WASM Testing at CI</a></p>\n</li>\n<li><p><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_11_various_fixes_and_improvements\">GSoC Blog 11: Various Fixes and Improvements in the WASM Backend</a></p>\n</li>\n</ul>\n</li>\n<li><p><strong>GSoC Ending Phase:</strong> This comprises the final week(s) of GSoC where we focused on <code>CI</code> (Continuous Integration) support for wasm building, its storage and some final features and fixes. The blog during this phase is as follows:</p>\n<ul>\n<li><a href=\"https://www.ubaidshaikh.me/blogs/gsoc_12_several_features_and_final_fixes\">GSoC Blog 12: Supporting Several Features and Final Fixes</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mergepull-requests\">Merge/Pull Requests</h3>\n<p>The <code>merge</code>/<code>pull</code> requests submitted during the period of <code>GSoC</code> from (approx)<code>23-05-2022</code> to <code>23-08-2022</code> are as follows:</p>\n<p>At <code>Gitlab/lfortran</code>:</p>\n<ul>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1713\">Wasm backend #1713</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1757\">Add wasm_to_wat backend #1757</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1769\">Enable LLVM based wasm backend #1769</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1787\">Refactor wasm backend #1787</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1789\">WASM: Support i64 Constants #1789</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1791\">WASM: Support Unary Minus for i32 and i64 #1791</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1792\">WASM: Add support for f32 and f64 #1792</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1793\">WASM: Code Refactor and Minor Improvements #1793</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1794\">WASM: Add print support #1794</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1795\">WASM: parse empty source code #1795</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1796\">WASM: Compile/Build LFortran to WASM #1796</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1797\">WASM: Add support for stop and error stop #1797</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1808\">WASM: NodeJS Testing Infrastructure #1808</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1809\">WASM: Add support for basic If-Else #1809</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1810\">WASM: Minor Improvements #1810</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1811\">WASM: Suggested Minor Refactor #1811</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1822\">WASM: Add Cast Support #1822</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1823\">WASM: Support Relational Operators #1823</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1824\">WASM: Support Logical Operators #1824</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1830\">WASM: Add support for Loop #1830</a></p>\n</li>\n<li><p><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1834\">WASM: Various Improvements #1834</a></p>\n</li>\n</ul>\n<p>At <code>GitHub/lfortran</code>:</p>\n<ul>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/13\">WASM: Improvements and Refactoring #13</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/21\">WASM: Add support for Subroutines #21</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/27\">Refactor: WASM: Extract common return #27</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/49\">WASM: Initial support for Arrays #49</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/55\">WAT: Arrays Fix #55</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/66\">WASM: Support Real and Logical types with Arrays #66</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/70\">WASM: Supporting Multi-Dimensional Arrays #70</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/71\">CI: Support integration tests testing for WASM #71</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/77\">Pass: Passing Array descriptor by value #77</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/99\">WASM: Supporting array passing with explicit shapes #99</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/103\">WASM: Supporting specifying max no of memory pages #103</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/109\">WASM: Using pass_array_by_data #109()</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/114\">WASM: Fix false integration tests passing #114</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/123\">WASM: Implement set_exit_code #123()</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/124\">Support kind for different param types #124</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/126\">WASM: Declaring a fixed enough memory #126</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/127\">WASM: Use compile-time function value #127</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/153\">WASM: Support bind C for array passing to JavaScript #153</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/157\">CI: Building LFortran to WASM #157</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/588\">WASM: Support WAT for bind(c) functions #588</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/619\">CI: Fix CI and upload to wasm_builds #619</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/622\">CI: Fix upload to wasm_builds #622</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/631\">WAT: verify preamble #631</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/632\">CI: Fix: Overwrite the latest_commit file #632</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/634\">WAT: wasm_to_wat error handling #634</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/635\">WASM: Support defining functions in any order #635</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/636\">WASM: Enable supporting integration_tests #636</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/637\">WASM, WAT: Improve code formatting #637</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/640\">WASM: Support basic string variables #640</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/641\">WASM: Add support for cpu_time #641</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/642\">WASM: Remove function with no body warning #642</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/643\">WASM: Support runtime library #643</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lfortran/pull/657\">WASM: Fix import functions bug #657</a></p>\n</li>\n</ul>\n<p>At <code>GitHub/lcompilers_frontend</code>:</p>\n<ul>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/1\">CI: Add CI for auto deploying site #1</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/18\">Minor improvements #18</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/19\">Rename master branch to main #19</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/30\">Download files from wasm builds #30</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/35\">CI: trigger on post request #35</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/36\">Support cpu_time #36</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/37\">Support runtime library #37</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/39\">Increment lfortran latest_commit #39</a></p>\n</li>\n<li><p><a href=\"https://github.com/lfortran/lcompilers_frontend/pull/40\">Update latest_commit #40</a></p>\n</li>\n</ul>\n<h2 id=\"outcome\">Outcome:</h2>\n<p>The outcomes of the project are the following:</p>\n<ul>\n<li><p>A <code>WASM</code> Backend for <code>LFortran</code></p>\n</li>\n<li><p>A <code>WAT</code> Backend for <code>LFortran</code></p>\n</li>\n<li><p><code>LFortran</code> (along with its <code>runtime library</code>) compiles to <code>WASM</code> using <code>emscripten</code></p>\n</li>\n<li><p><code>CI</code> (Continuous Integration) support for building to <code>wasm</code> and storing built <code>lfortran</code> <code>wasm</code>\nat <a href=\"https://github.com/lfortran/wasm_builds/\">lfortran/wasm_builds</a></p>\n</li>\n<li><p>A frontend for the static webpage (at <a href=\"https://dev.lfortran.org/\">dev.lfortran.org</a>) where we deploy our <code>lfortran</code> <code>wasm</code> binary and can see it live in action</p>\n</li>\n<li><p><code>CI</code> (Continuous Integration) support for building the frontend site</p>\n</li>\n</ul>\n<h3 id=\"live-demo\">Live Demo:</h3>\n<p><img alt=\"Mandelbrot Demo\" src=\"/imgs/GSoCReport1.gif\"></p>\n<p><img alt=\"Tabs Demo\" src=\"/imgs/GSoCReport2.gif\"></p>\n<h2 id=\"future-work\">Future Work:</h2>\n<p>There are tremendous possiblities of extending this work. Some of the future work includes the following:</p>\n<ul>\n<li><p><strong>Extending the current <code>wasm</code> and <code>wat</code> backends:</strong> Adding support for dynamic memory allocation and thus <code>array</code> allocations during runtime. Supporting <code>structs</code> and derived types in the <code>wasm</code> and <code>wat</code> backends.</p>\n</li>\n<li><p><strong>More Robutness:</strong> Finding and fixing bugs in the current <code>wasm</code> and <code>wat</code> backends. Some of the issues are noted at <a href=\"https://github.com/lfortran/lfortran/issues/597\">WASM: Future Prospects #597</a> and fixing them would (hopefully) make our <code>wasm</code> architecture more robust.</p>\n</li>\n<li><p><strong>Supporting WASI:</strong> One of the directions could be to add support of <code>WASI</code> (<code>WebAssembly System Interface</code>) to the <code>LFortran</code> <code>WASM</code> Backend.</p>\n</li>\n<li><p><strong>Data Visualization:</strong> We could also try to explore data visualization using <code>fortran</code>.</p>\n</li>\n</ul>\n<h2 id=\"my-learnings\">My Learnings</h2>\n<p>It has been an incredible journey, full of fun and learning for me.</p>\n<p>Following is a list of my learnings (including but not limited to):</p>\n<ul>\n<li><p><strong>GIT:</strong> I got to learn/improve <code>version control</code> (<code>git</code>) skills.\nI learnt <code>rebasing</code>, <code>resetting</code> (hard, soft) and <code>cherry-picking</code> commits.\nPreviously, I used to be afraid of <code>merge</code> conflicts and now, I enjoy resolving them.</p>\n</li>\n<li><p><strong>WASM:</strong> This project provided me with the wonderful opportunity to understand how binaries are created and processed.\nI got to learn about the <code>wasm</code> structure and its textual format (<code>wat</code>).</p>\n</li>\n<li><p><strong>NextJS:</strong> I got to learn about <code>NextJS</code>. We used <code>NextJS</code> while building the <code>lcompilers_frontend</code>.</p>\n</li>\n<li><p><strong>CI:</strong> I also got the opportunity to work towards the <code>CI</code> (Continuous Integration) part during the course of the project.</p>\n</li>\n<li><p><strong>CMake:</strong> I also got the opportunity to get my hands onto <code>CMake</code> during the course of the project.</p>\n</li>\n<li><p><strong>Fortran:</strong> I got to learn about <code>fortran</code>. I learned about <code>intrinsic</code> functions, <code>runtime library</code>, etc.</p>\n</li>\n<li><p><strong>Compilers:</strong> I got the opportunity to learn how a <code>compiler</code> works, specifically the <code>backend</code>/<code>codegen</code> part.</p>\n</li>\n<li><p><strong>Conda:</strong> This was the first time for me using <code>conda</code> and I realized how powerful <code>conda</code> environments could be.</p>\n</li>\n</ul>\n<p>and the list goes on.</p>\n<p>Indeed, I think this project has made me a better programmer, problem solver, analyzer and communicator.</p>\n<p>I am thankful to Ondrej Sir and team for accepting me in this project.\nThank you so much for this wonderful journey and amazing experience throughout.</p>\n","frontmatter":{"slug":"gsoc_13_report","excerpt":"GSoC 22: Report","title":"LFortran: IMPLEMENTING A CUSTOM WASM BACKEND","publishedAt":"2022-08-25","day":"August 25, 2022","readingTime":"7 min read"}}},"__N_SSG":true}