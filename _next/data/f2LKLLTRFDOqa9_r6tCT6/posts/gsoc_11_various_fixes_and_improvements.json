{"pageProps":{"blog":{"content":"<h1 id=\"hey-there-ðŸ¤—-welcome-to-my-gsoc-journey\">Hey there ðŸ¤—, Welcome to my GSoC Journey</h1>\n<p>This is a series of blogs that I am writing to share my amazing <strong>GSoC 22</strong> (Google Summer of Code 2022) Journey with you all.</p>\n<hr>\n<h1 id=\"various-fixes-and-improvements-in-the-wasm-backend\">Various Fixes and Improvements in the WASM Backend</h1>\n<p>This week has been amazing.\nI worked on several small/minor fixes and improvements.\nThe improvements range from fixes in testing-infrastructure to supporting new features in the <code>wasm</code> backend.\nThe details are in the respective <code>PRs</code> below.</p>\n<p>One of the unique findings this week was that our <code>wasm</code> testing infrastructure had a bug that\nit would mark a test case as passing if it has a <code>wasm compile-time</code> failure.\nIdeally, <code>compile-time</code> failure is also a <code>failure</code> that should/must be tracked/considered.\nIt happens that the <code>JavaScript</code> glue code that <code>lfortran</code> emits when <code>wasm</code> backend is used\nhad a <code>logical</code> error due to which on executing the generated <code>wasm</code>, <code>nodejs</code> exits without any error.\nThis anomaly was found in (<a href=\"https://github.com/lfortran/lfortran/pull/109\">WASM: Using pass_array_by_data() #109</a>) and\nwas hopefully fixed in (<a href=\"https://github.com/lfortran/lfortran/pull/114\">WASM: Fix false integration tests passing #114</a>).</p>\n<p>Indeed, this was a very <code>fun</code> week.</p>\n<p>This phase was mostly/approximately from <code>06-08-2022</code> to <code>12-08-2022</code>.</p>\n<p>The MRs during this phase are as follows:</p>\n<ul>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/103\">WASM: Supporting specifying max no of memory pages #103</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/109\">WASM: Using pass_array_by_data() #109</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/114\">WASM: Fix false integration tests passing #114</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/118\">WASM: Initial implementation of x**2 #118</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/123\">WASM: Implement set_exit_code() #123</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/126\">WASM: Declaring a fixed enough memory #126</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/127\">WASM: Use compile-time function value #127</a></li>\n</ul>\n<hr>\n<p>That's all for this blog. Thank you for your time. We continue this series in the next blog.</p>\n","frontmatter":{"slug":"gsoc_11_various_fixes_and_improvements","excerpt":"GSoC 22: Blog 11","title":"Various Fixes and Improvements in the WASM Backend","publishedAt":"2022-08-12","day":"August 12, 2022","readingTime":"2 min read"}}},"__N_SSG":true}