{"pageProps":{"blog":{"content":"<h1 id=\"hey-there-ðŸ¤—-welcome-to-my-gsoc-journey\">Hey there ðŸ¤—, Welcome to my GSoC Journey</h1>\n<p>This is a series of blogs that I am writing to share my amazing <strong>GSoC 22</strong> (Google Summer of Code 2022) Journey with you all.</p>\n<hr>\n<h1 id=\"supporting-multi-dimensional-arrays-and-wasm-testing-at-ci\">Supporting Multi-Dimensional Arrays and WASM Testing at CI</h1>\n<p>During this week, I worked on adding support for <code>Mult-Dimensional Arrays</code> in the <code>WebAssembly</code> Backend.\nI also worked on supporting <code>integration tests</code> <code>testing</code> for <code>WASM</code> at the <code>CI</code>.</p>\n<p>One of the challeges in this week was to figure out passing of the <code>dimensional</code> information of <code>arrays</code>\nduring <code>function</code>/<code>subroutine</code> calls.\nIt seems, one of the possible ways to do so is to use/implement <code>array descriptor</code> support in the <code>WebAssembly</code> Backend.\nI tried supporting the <code>array descriptor</code> idea in <a href=\"https://github.com/lfortran/lfortran/pull/98\">WASM: Initial Support for Array Descriptor #98</a>,\nbut could not figure out a good/acceptable implementation for it.</p>\n<p>Currently, as suggested by <a href=\"https://github.com/certik\">OndÅ™ej</a>, we are trying to pass <code>array dimensions</code> explicitly as <code>function parameters</code>.\nThere is an <code>ASR-&gt;ASR</code> pass under implementation at <a href=\"\">Add ASR pass for supporting passing array arguments by data pointer #87</a>,\nwhich would hopefully/possibly transform the following</p>\n<pre><code class=\"hljs language-python\">subroutine f(a, b)\ninteger :: a(:,:)\nreal :: b(:,:,:)\nend subroutine\n</code></pre>\n<p>into</p>\n<pre><code class=\"hljs language-python\">subroutine f(na1, na2, a, nb1, nb2, nb3, b)\ninteger, intent(<span class=\"hljs-keyword\">in</span>) :: na1, na2, nb1, nb2, nb3\ninteger :: a(na1, na2)\nreal :: b(nb1, nb2, nb3)\nend subroutine\n</code></pre>\n<p>and also update the respective <code>function</code>/<code>subroutine</code> calls as follows:</p>\n<pre><code class=\"hljs language-python\">call f(x, y)\n</code></pre>\n<p>to</p>\n<pre><code class=\"hljs language-python\">call f(size(x,<span class=\"hljs-number\">1</span>), size(x, <span class=\"hljs-number\">2</span>), x, size(y, <span class=\"hljs-number\">1</span>), size(y, <span class=\"hljs-number\">2</span>), size(y, <span class=\"hljs-number\">3</span>), y)\n</code></pre>\n<p>This suggested approach (which looks good and beautiful) can enable the <code>wasm</code> backend\nto support passing arrays (along with their dimensional information) to <code>functions</code>/<code>subroutines</code>.\nI submitted a <code>PR</code> at <a href=\"https://github.com/lfortran/lfortran/pull/99\">WASM: Supporting array passing with explicit shapes #99</a>\nwhich supports this approach in the <code>wasm</code> backend.</p>\n<p>This phase was mostly/approximately from <code>30-07-2022</code> to <code>05-08-2022</code>.</p>\n<p>The MRs during this phase are as follows:</p>\n<ul>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/70\">WASM: Supporting Multi-Dimensional Arrays #70</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/71\">CI: Support integration tests testing for WASM #71</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/98\">WASM: Initial Support for Array Descriptor #98</a></li>\n<li><a href=\"https://github.com/lfortran/lfortran/pull/99\">WASM: Supporting array passing with explicit shapes #99</a></li>\n</ul>\n<hr>\n<p>That's all for this blog. Thank you for your time. We continue this series in the next blog.</p>\n","frontmatter":{"slug":"gsoc_10_multi_dim_arrays_and_wasm_testing_at_ci","excerpt":"GSoC 22: Blog 10","title":"Supporting Multi-Dimensional Arrays and WASM Testing at CI","publishedAt":"2022-08-05","day":"August 5, 2022","readingTime":"2 min read"}}},"__N_SSG":true}