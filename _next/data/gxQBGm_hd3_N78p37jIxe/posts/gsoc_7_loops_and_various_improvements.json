{"pageProps":{"blog":{"content":"<h1 id=\"hey-there-ðŸ¤—-welcome-to-my-gsoc-journey\">Hey there ðŸ¤—, Welcome to my GSoC Journey</h1>\n<p>This is a series of blogs that I am writing to share my amazing <strong>GSoC 22</strong> (Google Summer of Code 2022) Journey with you all.</p>\n<hr>\n<h1 id=\"supporting-loops-and-other-improvements\">Supporting Loops and Other Improvements</h1>\n<p>In this week, I added support for</p>\n<ul>\n<li><code>loops</code>, <code>cycle</code> and <code>exit</code>.</li>\n<li>basic support for <code>abs()</code>, <code>mod()</code></li>\n<li>other minor improvements</li>\n</ul>\n<p>There was a minor challenge faced this week in supporting of the <code>abs/mod</code>.\nThe <code>abs</code> and <code>mod</code> functions are one of the first <code>runtime</code> functions to be supported by the <code>wasm</code> backend.\nFor supporting <code>mod/abs</code>, we need to use the <code>mod/abs</code> function from the <code>pure</code> <code>runtime</code> library.</p>\n<p>When using the <code>mod/abs</code> function, it seems that the <code>ASR</code> includes every function from the parent module of <code>mod/abs</code>.\nSince, the <code>ASR</code> seemed to include all the functions in the parent module of <code>mod/abs</code>, all of those were being\nneeded to be defined by the <code>WebAssembly</code> Backend during the <code>ASR-&gt;WASM</code> conversion.\nI noticed that the <code>llvm</code> and <code>cpp</code> backends were defining only those functions from the parent of <code>mod/abs</code>,\nwhich were actually being needed/used by <code>mod/abs</code>.\nI wished to achieve/have a similar effect in the <code>WASM</code> Backend, that is, during the <code>ASR-&gt;WASM</code> conversion,\nthe <code>WebAssembly</code> Backend should only define the function <code>mod/abs</code> and any other necessary helper functions\nbeing used by <code>mod/abs</code>. After playing with the code for some time (with no success), I later realized that,\nthere might be an <code>ASR-&gt;ASR</code> pass which removes the unused functions.\nOn inspecting the <code>cpp</code> backend, I found a pass named <code>pass_unused_functions()</code> which seemed to remove the\nunused/extra functions being included in the <code>ASR</code>.\nUsing the <code>pass_unused_functions()</code>, the minor challenge was solved.</p>\n<p>This phase was mostly/approximately from <code>09-07-2022</code> to <code>15-07-2022</code>.</p>\n<p>The MRs during this phase are as follows:</p>\n<ul>\n<li><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1830\">!1830 WASM: Add support for Loop</a></li>\n<li><a href=\"https://gitlab.com/lfortran/lfortran/-/merge_requests/1834\">!1834 WASM: Various Improvements</a></li>\n</ul>\n<hr>\n<p>That's all for this blog. Thank you for your time. We continue this series in the next blog.</p>\n","frontmatter":{"slug":"gsoc_7_loops_and_various_improvements","excerpt":"GSoC 22: Blog 7","title":"Supporting Loops and Other Improvements","publishedAt":"2022-07-15","day":"July 15, 2022","readingTime":"2 min read"}}},"__N_SSG":true}